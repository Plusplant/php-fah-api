<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flora@Home API
 *
 * Flora@Home enables any web shop to sell a range of fresh flowers and plants. Completely integrated into your own web shop. Our REST API allows you to request your own assortment. The API makes a two-way traffic between applications and webshops possible.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: api_support@floraathome.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @description Properties not marked with the red asterisk can contain an empty string
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timestamp' => 'string',
        'productcode' => 'string',
        'potsize' => 'string',
        'height' => 'string',
        'dutchname' => 'string',
        'linnaeusname' => 'string',
        'numberperorder' => 'string',
        'purchaseprice' => 'string',
        'promotionaltext' => 'string',
        'description' => 'string',
        'specifications' => 'string',
        'caretips' => 'string',
        'aboutgrower' => 'string',
        'branches' => 'string',
        'images' => 'string[]',
        'grower' => 'string',
        'category' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timestamp' => null,
        'productcode' => null,
        'potsize' => null,
        'height' => null,
        'dutchname' => null,
        'linnaeusname' => null,
        'numberperorder' => null,
        'purchaseprice' => null,
        'promotionaltext' => null,
        'description' => null,
        'specifications' => null,
        'caretips' => null,
        'aboutgrower' => null,
        'branches' => null,
        'images' => null,
        'grower' => null,
        'category' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'productcode' => 'productcode',
        'potsize' => 'potsize',
        'height' => 'height',
        'dutchname' => 'dutchname',
        'linnaeusname' => 'linnaeusname',
        'numberperorder' => 'numberperorder',
        'purchaseprice' => 'purchaseprice',
        'promotionaltext' => 'promotionaltext',
        'description' => 'description',
        'specifications' => 'specifications',
        'caretips' => 'caretips',
        'aboutgrower' => 'aboutgrower',
        'branches' => 'branches',
        'images' => 'images',
        'grower' => 'grower',
        'category' => 'category'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'productcode' => 'setProductcode',
        'potsize' => 'setPotsize',
        'height' => 'setHeight',
        'dutchname' => 'setDutchname',
        'linnaeusname' => 'setLinnaeusname',
        'numberperorder' => 'setNumberperorder',
        'purchaseprice' => 'setPurchaseprice',
        'promotionaltext' => 'setPromotionaltext',
        'description' => 'setDescription',
        'specifications' => 'setSpecifications',
        'caretips' => 'setCaretips',
        'aboutgrower' => 'setAboutgrower',
        'branches' => 'setBranches',
        'images' => 'setImages',
        'grower' => 'setGrower',
        'category' => 'setCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'productcode' => 'getProductcode',
        'potsize' => 'getPotsize',
        'height' => 'getHeight',
        'dutchname' => 'getDutchname',
        'linnaeusname' => 'getLinnaeusname',
        'numberperorder' => 'getNumberperorder',
        'purchaseprice' => 'getPurchaseprice',
        'promotionaltext' => 'getPromotionaltext',
        'description' => 'getDescription',
        'specifications' => 'getSpecifications',
        'caretips' => 'getCaretips',
        'aboutgrower' => 'getAboutgrower',
        'branches' => 'getBranches',
        'images' => 'getImages',
        'grower' => 'getGrower',
        'category' => 'getCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['productcode'] = isset($data['productcode']) ? $data['productcode'] : null;
        $this->container['potsize'] = isset($data['potsize']) ? $data['potsize'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['dutchname'] = isset($data['dutchname']) ? $data['dutchname'] : null;
        $this->container['linnaeusname'] = isset($data['linnaeusname']) ? $data['linnaeusname'] : null;
        $this->container['numberperorder'] = isset($data['numberperorder']) ? $data['numberperorder'] : null;
        $this->container['purchaseprice'] = isset($data['purchaseprice']) ? $data['purchaseprice'] : null;
        $this->container['promotionaltext'] = isset($data['promotionaltext']) ? $data['promotionaltext'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['specifications'] = isset($data['specifications']) ? $data['specifications'] : null;
        $this->container['caretips'] = isset($data['caretips']) ? $data['caretips'] : null;
        $this->container['aboutgrower'] = isset($data['aboutgrower']) ? $data['aboutgrower'] : null;
        $this->container['branches'] = isset($data['branches']) ? $data['branches'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['grower'] = isset($data['grower']) ? $data['grower'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['productcode'] === null) {
            $invalidProperties[] = "'productcode' can't be null";
        }
        if ($this->container['dutchname'] === null) {
            $invalidProperties[] = "'dutchname' can't be null";
        }
        if ($this->container['numberperorder'] === null) {
            $invalidProperties[] = "'numberperorder' can't be null";
        }
        if ($this->container['purchaseprice'] === null) {
            $invalidProperties[] = "'purchaseprice' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['images'] === null) {
            $invalidProperties[] = "'images' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['timestamp'] === null) {
            return false;
        }
        if ($this->container['productcode'] === null) {
            return false;
        }
        if ($this->container['dutchname'] === null) {
            return false;
        }
        if ($this->container['numberperorder'] === null) {
            return false;
        }
        if ($this->container['purchaseprice'] === null) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if ($this->container['images'] === null) {
            return false;
        }
        if ($this->container['category'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp timestamp
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets productcode
     *
     * @return string
     */
    public function getProductcode()
    {
        return $this->container['productcode'];
    }

    /**
     * Sets productcode
     *
     * @param string $productcode productcode
     *
     * @return $this
     */
    public function setProductcode($productcode)
    {
        $this->container['productcode'] = $productcode;

        return $this;
    }

    /**
     * Gets potsize
     *
     * @return string
     */
    public function getPotsize()
    {
        return $this->container['potsize'];
    }

    /**
     * Sets potsize
     *
     * @param string $potsize potsize
     *
     * @return $this
     */
    public function setPotsize($potsize)
    {
        $this->container['potsize'] = $potsize;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets dutchname
     *
     * @return string
     */
    public function getDutchname()
    {
        return $this->container['dutchname'];
    }

    /**
     * Sets dutchname
     *
     * @param string $dutchname dutchname
     *
     * @return $this
     */
    public function setDutchname($dutchname)
    {
        $this->container['dutchname'] = $dutchname;

        return $this;
    }

    /**
     * Gets linnaeusname
     *
     * @return string
     */
    public function getLinnaeusname()
    {
        return $this->container['linnaeusname'];
    }

    /**
     * Sets linnaeusname
     *
     * @param string $linnaeusname linnaeusname
     *
     * @return $this
     */
    public function setLinnaeusname($linnaeusname)
    {
        $this->container['linnaeusname'] = $linnaeusname;

        return $this;
    }

    /**
     * Gets numberperorder
     *
     * @return string
     */
    public function getNumberperorder()
    {
        return $this->container['numberperorder'];
    }

    /**
     * Sets numberperorder
     *
     * @param string $numberperorder numberperorder
     *
     * @return $this
     */
    public function setNumberperorder($numberperorder)
    {
        $this->container['numberperorder'] = $numberperorder;

        return $this;
    }

    /**
     * Gets purchaseprice
     *
     * @return string
     */
    public function getPurchaseprice()
    {
        return $this->container['purchaseprice'];
    }

    /**
     * Sets purchaseprice
     *
     * @param string $purchaseprice Excl. VAT
     *
     * @return $this
     */
    public function setPurchaseprice($purchaseprice)
    {
        $this->container['purchaseprice'] = $purchaseprice;

        return $this;
    }

    /**
     * Gets promotionaltext
     *
     * @return string
     */
    public function getPromotionaltext()
    {
        return $this->container['promotionaltext'];
    }

    /**
     * Sets promotionaltext
     *
     * @param string $promotionaltext promotionaltext
     *
     * @return $this
     */
    public function setPromotionaltext($promotionaltext)
    {
        $this->container['promotionaltext'] = $promotionaltext;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets specifications
     *
     * @return string
     */
    public function getSpecifications()
    {
        return $this->container['specifications'];
    }

    /**
     * Sets specifications
     *
     * @param string $specifications specifications
     *
     * @return $this
     */
    public function setSpecifications($specifications)
    {
        $this->container['specifications'] = $specifications;

        return $this;
    }

    /**
     * Gets caretips
     *
     * @return string
     */
    public function getCaretips()
    {
        return $this->container['caretips'];
    }

    /**
     * Sets caretips
     *
     * @param string $caretips caretips
     *
     * @return $this
     */
    public function setCaretips($caretips)
    {
        $this->container['caretips'] = $caretips;

        return $this;
    }

    /**
     * Gets aboutgrower
     *
     * @return string
     */
    public function getAboutgrower()
    {
        return $this->container['aboutgrower'];
    }

    /**
     * Sets aboutgrower
     *
     * @param string $aboutgrower aboutgrower
     *
     * @return $this
     */
    public function setAboutgrower($aboutgrower)
    {
        $this->container['aboutgrower'] = $aboutgrower;

        return $this;
    }

    /**
     * Gets branches
     *
     * @return string
     */
    public function getBranches()
    {
        return $this->container['branches'];
    }

    /**
     * Sets branches
     *
     * @param string $branches branches
     *
     * @return $this
     */
    public function setBranches($branches)
    {
        $this->container['branches'] = $branches;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[] $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets grower
     *
     * @return string
     */
    public function getGrower()
    {
        return $this->container['grower'];
    }

    /**
     * Sets grower
     *
     * @param string $grower grower
     *
     * @return $this
     */
    public function setGrower($grower)
    {
        $this->container['grower'] = $grower;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


